start =
    ws* e:expression ws*
    { return e; }

expression =
    "()"
    { return "null"; }
  / "(" ws* car:expression ws+ "." ws+ cdr:expression ")"
    { return [car, cdr]; }
  / "(" ws* es:expressionlist ws* ")"
    { return es; }
  / "'" e:expression
    { return ["quote", [e, "null"]]; }
  / a:atom
    { return a; }

expressionlist =
    car:expression ws+ cdr:expressionlist
    { return [car, cdr]; }
  / car:expression
    { return [car, "null"]; }

ws =
    ";;" [^\n]*
  / [ \n\t]

validchar
    = [0-9a-zA-Z_?!+\-=@#$%^&*/.<>]

atom =
    chars:[0-9]+
    { return parseInt(chars.join(''), 10); }
  / "-" chars:[0-9]+
    { return -1 * parseInt(chars.join(''), 10); }
  / chars:validchar+
    { var s = chars.join(""); return (s == ".") ? null : s; }